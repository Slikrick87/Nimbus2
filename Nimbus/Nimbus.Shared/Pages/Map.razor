@using Nimbus.Shared.Logic
@using Nimbus.Shared.Services;
@using Nimbus.Shared.Entities;
@using Nimbus.Shared.Repositories;
@using Nimbus.Shared.Pages;
@using Microsoft.Maui.Devices.Sensors;
@using System.Linq;
@using System.Text.Json;
@using Microsoft.JSInterop;
@using System.Diagnostics

@page "/map"


@inject IRouteRepository RouteRepository
@inject IAddressRepository AddressRepository
@inject IGeoLocationService GeoLocationService
@inject SelectionService SelectionService
@inject IJSRuntime JS


<h3>Map</h3>
<div id="map" style="height:500px;width:100%;"></div>
<script src="https://maps.googleapis.com/maps/api/js?key=@Keys.mapsKey" defer></script>
<script>
        let map;

    async function geocodeAddress(address) {
      return new Promise((resolve, reject) => {
        const geocoder = new google.maps.Geocoder();
        geocoder.geocode({ address: address }, (results, status) => {
          if (status === 'OK') {
            const location = {
              lat: results[0].geometry.location.lat(),
              lng: results[0].geometry.location.lng()
            };
            resolve(JSON.stringify(location)); // This returns the coordinates as a JSON string
          } else {
            reject(status);
          }
        });
      });
    }

    window.initMap = async function initMap(locationsJson) {
      // Parse through the incoming locations on manifest
      const locations = JSON.parse(locationsJson);
      console.log(locations);

      // The location of first stop in list
      const position = { lat: locations[0].lat, lng: locations[0].lng };
      
      
      const { Map } = await google.maps.importLibrary("maps");
      const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");


      // The map, centered at position which is first stop in tuple
      map = new Map(document.getElementById("map"), {
        zoom: 14,
        center: position,
        mapId: "DEMO_MAP_ID",
      });

      // Add a marker for each location
      locations.forEach((location, index) => {
        new AdvancedMarkerElement({
          map: map,
          position: { lat: location.lat, lng: location.lng },
          title: `Stop ${index + 1}`,
          zIndex: location.index
        });
      });
    }

</script>

@* <div id="orderedStops"> *@
<table class="table">
    @if (SelectionService.selectedRoute != null && SelectionService.selectedRoute.stops != null && SelectionService.orderedStopsForRoute != null)
    {
        @* <ol> *@
        <thead>
            <tr>
                <th>Order #</th>
                <th>Street Number</th>
                <th>Street Name</th>
                <th>City</th>
                <th>State</th>
                <th>Zip Code</th>
            </tr>
        </thead>
        <tbody>
            
            @* @SelectionService.orderedStopsForRoute = SelectionService.selectedRoute.stops.OrderBy(s => s.order).ToList(); *@
            @foreach (var tuple in SelectionService.orderedStopsForRoute.Select((stop, i) => new { stop, i }))
            {
                <tr>
                    <td>@(tuple.i + 1)</td>
                    <td>@tuple.stop.streetNumber</td>
                    <td>@tuple.stop.streetName</td>
                    <td>@tuple.stop.city</td>
                    <td>@tuple.stop.state</td>
                    <td>@tuple.stop.zipCode</td>
                    <td><button @onclick="() => MoveUp(tuple.i)">Up</button></td>
                    <td><button @onclick="() => MoveDown(tuple.i)">Down</button></td>
                </tr>
            }
        </tbody>
        @* </ol> *@
    }
</table>
@* </div> *@
@code {
    //need to call an addmarker method to add markers to the map
    //int index = 1;
    public class GeoCodeResult
    {
        public double lat { get; set; }
        public double lng { get; set; }

    }
    List<GeoCodeResult> locationsGeoCode = new List<GeoCodeResult>();
    List<String> locationsJson = new List<String>();
    // //List<LocationObject> enrichedLocationsJson = new List<LocationObject>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await GetAddressesAndGeocode();
            var locations = JsonSerializer.Serialize(SelectionService.orderedStopsForRoute
                .Where(a => a.Lat.HasValue && a.Lng.HasValue)
                .Select(a => new { lat = a.Lat.Value, lng = a.Lng.Value })
                .ToList());
            //var serializedLocations = JsonSerializer.Serialize(locations);
            await JS.InvokeVoidAsync("initMap", locations);
            //StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing map: {ex.Message}");
        }
    }

    public async Task GetAddressesAndGeocode()
    {
        if (SelectionService.selectedRoute != null)
        {
            var addresses = AddressRepository.GetAddressesByRoute(SelectionService.selectedRoute.Id);
            //var addressStrings = addresses.Select(a => $"{a.streetNumber} {a.streetName}, {a.city}, {a.state} {a.zipCode}").ToList();


            foreach (var address in addresses)
            {

                //var json = await JS.InvokeAsync<string>("geocodeAddress", address);
                //var location = JsonSerializer.Deserialize<GeoCodeResult>(json);
                //var addressJson = addresses.Select(a => $"{a.streetNumber} {a.streetName}, {a.city}, {a.state} {a.zipCode}").ToList();

                //locationsGeoCode.Add(location);
                try
                {
                    var formattedAddress = $"{address.streetNumber} {address.streetName}, {address.city}, {address.state} {address.zipCode}";
                    var jsonLatLng = await JS.InvokeAsync<string>("geocodeAddress", formattedAddress);
                    Debug.WriteLine($"Coordinates in json {jsonLatLng}");
                    var location = JsonSerializer.Deserialize<GeoCodeResult>(jsonLatLng);
                    address.Lng = location.lng;
                    address.Lat = location.lat;
                    String coordinatesForAddress = ($"lat:{address.Lat}, lng:{address.Lng}");
                    Debug.WriteLine($"Location Coordinates successfully updated Coordinates:{address.Lat}, {address.Lng}");
                    locationsJson.Add(coordinatesForAddress);
                    Debug.WriteLine($"What was added to locationsJson: {address.streetName}");
                }
                catch { Debug.WriteLine("Coordinate retrieval unsuccessful."); }
            }
        }
    }
    private async Task MoveUp(int key)
    {
        if (key >= 0)
        {
            try
            {
                var stops = SelectionService.orderedStopsForRoute;
                var temp = stops[key];
                stops[key] = stops[key - 1];
                stops[key - 1] = temp;
                await SelectionService.ReorderStopsForRoute(stops);
                StateHasChanged();
                await UpdateMap();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error moving stop up: {ex.Message}");
            }
        }
    }
    private async Task MoveDown(int key)
    {
        if (key < SelectionService.orderedStopsForRoute.Count - 1)
        {
            try
            {
                var stops = SelectionService.orderedStopsForRoute;
                var temp = stops[key];
                stops[key] = stops[key + 1];
                stops[key + 1] = temp;
                SelectionService.ReorderStopsForRoute(stops);
                StateHasChanged();
                await UpdateMap();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error moving stop up: {ex.Message}");
            }
        }
    }
    private async Task UpdateMap()
    {
        await GetAddressesAndGeocode();
        var serializedLocations = JsonSerializer.Serialize(locationsGeoCode);
        await JS.InvokeVoidAsync("initMap", serializedLocations);
    }

    public async Task GetLocationFromDeviceAsync()
    {
        Location currentLocation = await GeoLocationService.GetLocationAsync();
    }
    public async Task<string> GetLatLong()
    {
        try
        {
            return AddressRepository.ConvertToJSAddressByRoute(SelectionService.selectedRoute.Id).AsyncState.ToString();
        }
        catch (Exception ex)
        {
            return "lat: 37.7749, lng: -122.4194";
        }
    }
    public async Task WindowOpen(Address stop)
    {
        var json = await JS.InvokeAsync<string>("geocodeAddress", stop);
        var location = JsonSerializer.Deserialize<GeoCodeResult>(json);
        var latlong = await GetLatLong();
        var url = $"https://www.google.com/maps/dir/?api=1&destination={latlong}";
        await JS.InvokeVoidAsync("open", url, "_blank");
    }

}