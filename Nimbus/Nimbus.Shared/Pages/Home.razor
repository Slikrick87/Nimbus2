@page "/"
@using Nimbus.Shared.Services;
@using Nimbus.Shared.Entities;
@using Nimbus.Shared.Repositories;
@inject ITruckRepository TruckRepository;
@inject IRouteRepository RouteRepository;
@inject SelectionService SelectionService;
@inject IFormFactor FormFactor


<style>
    .custom-truck-btn {
        width: 500px;
        background-color: #E6953C;
        color: black;
        border-radius: 6px;
        margin-bottom: 8px;
        transition: background-color 0.2s, color 0.2s;
    }

        .custom-truck-btn:hover {
            background-color: #4169E1;
            color: #F6F3EF;
        }

    .center-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 80vh; /* Optional: vertically center */
        text-align: center;
    }
</style>

<PageTitle>Home</PageTitle>
<div class="center-content">
@if (truckCheck == null && routeCheck == null)
{
    <h1>Testing Dudes (or dudettes) click below to add entities to Database for testing out application.</h1>
    <button class="btn btn-primary" @onclick="AddToDBForTesting">Give 'em Shell!</button>
    <h4>Unfortunately ran out of time and you may have to switch pages then come back to get correct home page to load</h4>
}
@if (truckCheck == null && routeCheck == null)
{
    <h1>No Trucks or Routes Found</h1>
    <h2>Please add Trucks and Routes To Database</h2>
    <div class="nav-item px-3">
        <NavLink class="nav-link" href="addRoute">
            <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Add Route
        </NavLink>
    </div>
    <div class="nav-item px-3">
        <NavLink class="nav-link" href="addTruck">
            <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Add Truck
        </NavLink>
    </div>
}
else if (SelectionService.selectedTruck != null)
{
    <h1>Selected Truck: @SelectionService.selectedTruck.id</h1>
    @* <h1>Selected Route: @route.Id, @route.nickName</h1> *@
    <div>
        <h3>Enter Current Mileage: </h3>
        <h3>@SelectionService.selectedTruck.mileage</h3>
        <input type="number" @bind="updatedMileage" Min="@currentMileage"/>
        <button class="btn btn-primary" @onclick="RequestMileageUpdateAsync">Set Mileage</button>
    </div>
    if (showConfirmation)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);" aria-modal="true" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Mileage Update</h5>
                        <button type="button" class="btn-close" @onclick="CancelUpdateAsync" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>@confirmMessage</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelUpdateAsync">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="UpdateMileageAsync">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    }
    <div class="nav-item px-3">
        <NavLink class="nav-link" href="selectRoute">
            <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Select Truck
        </NavLink>
    </div>
}
else if (SelectionService.selectedTruck == null)
{
    <h1>Select Truck</h1>
    foreach (TruckEntity truck in TruckRepository.GetAllTrucksAsync().Result)
    {
        <div>
                @* Replace the checkbox with a button for each truck *@
                <div>
                    <div>
                        <button class="btn custom-truck-btn" @onclick="() => OnButtonClick(truck)">
                            Select Truck Id: @truck.id Mileage: @truck.mileage
                        </button>
                    </div>
                </div>

                @code {
                    // Add a handler for the button click
                    private void OnButtonClick(TruckEntity truck)
                    {
                        TruckSelectionButton(truck); // Reuse your selection logic if desired
                    }
                }
        </div>
    }


    <div class="nav-item px-3">
        <NavLink class="nav-link" href="addTruck">
            <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span>Click Here To Add A New Truck
        </NavLink>
    </div>
}
else
{
    <h1>Please Select Truck and Route</h1>


    <div class="nav-item px-3">
        <NavLink class="nav-link" href="selectTruck">
            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Set Truck
        </NavLink>
    </div>

    <div class="nav-item px-3">
        <NavLink class="nav-link" href="selectRoute">
            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Set Route
        </NavLink>
    </div>
}
</div>
@* 
    //scaffold Api call to database to meet requirement to serve an api repository endpoints
    //Can move @code to a partial class with same name such as Home.cs
    //look up blazor validation form
    //<tbody>simple html table</tbody>
    //can use @page "/DisplayTruck/{TruckId}" to set the route and use another to same page without {TruckId}
    //@bind-Value="@truckid" to bind the value to the property will chhange dynamically even in loops and if statements
    //Input select for dropdowns InputCheckBox for checkboxes
    //check<EditForm Model="truck" OnValidSubmit="HandleValidSubmit">
    //add modal for creating and adding addresses to routes
    //lock buttons after onclick when using ASYNC so you don't have multiple calls
    //finish tests 
    //Check Datacontext and update relationships
    //IAsyncEnumerable for large data sets
    //CancellationTokenSource
    //change header footer and layout in layout.cshtml
    //make new layout page for mao display
    //[Required(ErrorMessage = "Please enter a name.")])])
    //Add for calling error list display on creation pages and where according
 *@
